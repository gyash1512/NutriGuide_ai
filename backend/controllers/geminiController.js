import generativeModel from '../config/gemini.js';
import { getMedicalDataForAnalysis } from './userController.js';
import MealPlan from '../models/MealPlan.js';
import WorkoutPlan from '../models/WorkoutPlan.js';
import MedicalData from '../models/MedicalData.js';
import User from '../models/User.js';

export const getAIHealthSummary = async (req, res) => {
  try {
    // First, get the medical data
    getMedicalDataForAnalysis(req, {
      status: (code) => ({
        json: async (medicalData) => {
          if (Object.keys(medicalData).length === 0) {
            return res.status(200).json({ analysis: "No medical data found for this user." });
          }

          const prompt = `Analyze the following medical data and provide a summary: ${JSON.stringify(
            medicalData
          )}`;
          const result = await generativeModel.generateContent(prompt);
          const response = result.response;
          const text = response.candidates[0].content.parts[0].text;

          // Save the summary to the database
          await MedicalData.findOneAndUpdate({ email: req.params.email }, { ai_health_summary: text }, { upsert: true });

          res.json({ analysis: text });
        }
      })
    });
  } catch (error) {
    console.error('Error in getAIHealthSummary:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

export const getWorkoutPlan = async (req, res) => {
  try {
    const { email, fitnessLevel, goals, otherNotes } = req.body;

    const medicalData = await MedicalData.findOne({ email });

    let prompt = `Generate a 7-day workout plan.`;

    if (medicalData) {
      const curatedData = {};
      for (const key in medicalData.toObject()) {
        if (medicalData[key] !== null && key !== 'email' && key !== '_id' && key !== '__v' && key !== 'createdAt' && key !== 'updatedAt') {
          curatedData[key] = medicalData[key];
        }
      }
      if (Object.keys(curatedData).length > 0) {
        prompt += `\n\nHere is the user's medical data for context:\n${JSON.stringify(curatedData, null, 2)}`;
      }
    }

    prompt += `\n\nPlease consider the following user preferences:\n`;
    if (fitnessLevel) prompt += `- Fitness Level: ${fitnessLevel}\n`;
    if (goals) prompt += `- Goals: ${goals}\n`;
    if (otherNotes) prompt += `- Other important notes: ${otherNotes}\n`;

    const result = await generativeModel.generateContent(prompt);
    const response = result.response;
    const text = response.candidates[0].content.parts[0].text;

    await WorkoutPlan.findOneAndUpdate({ email }, { plan: text }, { upsert: true, new: true });

    res.json({ workoutPlan: text });
  } catch (error) {
    console.error('Error in getWorkoutPlan:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

export const getSavedWorkoutPlan = async (req, res) => {
  try {
    const { email } = req.params;
    const workoutPlan = await WorkoutPlan.findOne({ email }).sort({ createdAt: -1 });
    if (workoutPlan) {
      res.json({ workoutPlan: workoutPlan.plan });
    } else {
      res.json({ workoutPlan: null });
    }
  } catch (error) {
    console.error('Error fetching saved workout plan:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

export const getDietPlan = async (req, res) => {
  try {
    const { email, location, dietaryPreference, otherNotes } = req.body;

    const medicalData = await MedicalData.findOne({ email });

    let prompt = `Generate a 7-day diet plan.`;

    if (medicalData) {
      const curatedData = {};
      for (const key in medicalData.toObject()) {
        if (medicalData[key] !== null && key !== 'email' && key !== '_id' && key !== '__v' && key !== 'createdAt' && key !== 'updatedAt') {
          curatedData[key] = medicalData[key];
        }
      }
      if (Object.keys(curatedData).length > 0) {
        prompt += `\n\nHere is the user's medical data for context:\n${JSON.stringify(curatedData, null, 2)}`;
      }
    }

    prompt += `\n\nPlease consider the following user preferences:\n`;
    if (location) prompt += `- Location for local cuisine suggestions: ${location}\n`;
    if (dietaryPreference) prompt += `- Dietary Preference: ${dietaryPreference}\n`;
    if (otherNotes) prompt += `- Other important notes: ${otherNotes}\n`;
    
    const result = await generativeModel.generateContent(prompt);
    const response = result.response;
    const text = response.candidates[0].content.parts[0].text;

    await MealPlan.findOneAndUpdate({ email }, { name: "AI Generated Diet Plan", description: "Diet plan generated by AI", meals: [], plan: text }, { upsert: true, new: true });

    res.json({ dietPlan: text });
  } catch (error) {
    console.error('Error in getDietPlan:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

export const getSavedDietPlan = async (req, res) => {
  try {
    const { email } = req.params;
    const mealPlan = await MealPlan.findOne({ email }).sort({ createdAt: -1 });
    if (mealPlan) {
      res.json({ dietPlan: mealPlan.plan });
    } else {
      res.json({ dietPlan: null });
    }
  } catch (error) {
    console.error('Error fetching saved diet plan:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

export const chatWithAI = async (req, res) => {
  try {
    const { history, message } = req.body;
    const chat = generativeModel.startChat({
      history: history,
    });
    const result = await chat.sendMessageStream(message);

    res.setHeader('Content-Type', 'text/event-stream');
    res.setHeader('Cache-Control', 'no-cache');
    res.setHeader('Connection', 'keep-alive');

    for await (const chunk of result.stream) {
      res.write(`data: ${JSON.stringify(chunk)}\n\n`);
    }
    res.end();
  } catch (error) {
    console.error('Error in chatWithAI:', error);
    res.status(500).json({ message: 'Server error' });
  }
};
